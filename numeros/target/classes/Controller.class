@RestController
@RequestMapping({"/contacts"})
public class ContactController {

    private ContactRepository repository;

    ContactController(ContactRepository contactRepository) {
        this.repository = contactRepository;

    }
    //metodos do CRUD aqui
    @GetMapping
    public List findALL( ) {
        return repository.findALL( );
    }
    @GetMapping(path = {"/{id}"})
    public ResponseEntity findById(@PathVariable lond id) {
        return repository.findById(id)
                .map(record -> ResponseEntity.ok( ).body(record))
                .orElse(ResponseEntity.notFound( ).build( ));
    }
    @PostMapping
    public Contact create(@RequestBody Contact contact){
        return repository.save(contact);
    }
    "name": "Java",
    "email": "Java@email.com",
    "phone": "(111)111-1111"
    }
    @PutMapping(value="/{id}")
    public ResponseEntity update(@PathVariable("id") long id,
                                          @RequestBody Contact contact) {
      return repository.findById(id)
              .map(record -> {
                  record.setName(contact.getName( ));
                  record.setEmail(contact.getEmail( ));
                  record.setPhone(contact.getPhone( ));
                  Contact updated = repository.save(record);
                  return responseEntity.ok( ).body(updated);
              }).orElse(ResponseEntity.notFound( ).build( ));                                        
     }
     @DeleteMapping(path = {"/{id}"})
     public ResponseEntity <?> delete(@PathVariable long id) {
         return repository.findById(id)
                 .map(record -> {
                     repository.deleteById(id);
                     return ResponseEntity.ok( ).build( );
              }).orElse(ResponseEntity.notFound( ).build( )); 
     }
}